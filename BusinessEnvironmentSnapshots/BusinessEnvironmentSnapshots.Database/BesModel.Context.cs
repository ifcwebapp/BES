//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessEnvironmentSnapshots.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BesEntities : DbContext
    {
        public BesEntities()
            : base("name=BesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<BankProject> BankProjects { get; set; }
        public virtual DbSet<StatisticsSource> StatisticsSources { get; set; }
    
        public virtual int GetValuesForCountry(Nullable<int> startYear, Nullable<int> endYear)
        {
            var startYearParameter = startYear.HasValue ?
                new ObjectParameter("startYear", startYear) :
                new ObjectParameter("startYear", typeof(int));
    
            var endYearParameter = endYear.HasValue ?
                new ObjectParameter("endYear", endYear) :
                new ObjectParameter("endYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetValuesForCountry", startYearParameter, endYearParameter);
        }
    
        public virtual ObjectResult<GetChartInfo_Result> GetChartInfo(string chartId)
        {
            var chartIdParameter = chartId != null ?
                new ObjectParameter("chartId", chartId) :
                new ObjectParameter("chartId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChartInfo_Result>("GetChartInfo", chartIdParameter);
        }
    
        public virtual int GetIndicatorsValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetIndicatorsValues");
        }
    
        public virtual ObjectResult<GetCountryInfo_Result> GetCountryInfo(string countryCode)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("countryCode", countryCode) :
                new ObjectParameter("countryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountryInfo_Result>("GetCountryInfo", countryCodeParameter);
        }
    
        public virtual ObjectResult<GetCountriesInfo_Result> GetCountriesInfo(string countryCode)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("countryCode", countryCode) :
                new ObjectParameter("countryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCountriesInfo_Result>("GetCountriesInfo", countryCodeParameter);
        }
    
        public virtual int GetValues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetValues");
        }
    
        public virtual ObjectResult<GetIndicatorsInfo_Result> GetIndicatorsInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIndicatorsInfo_Result>("GetIndicatorsInfo");
        }
    
        public virtual ObjectResult<GetAllTabs_Result> GetAllTabs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTabs_Result>("GetAllTabs");
        }
    
        public virtual ObjectResult<GetDocuments_Result> GetDocuments(string countryCode)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("countryCode", countryCode) :
                new ObjectParameter("countryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDocuments_Result>("GetDocuments", countryCodeParameter);
        }
    
        public virtual ObjectResult<GetOtherResources_Result> GetOtherResources(string countryCode)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("countryCode", countryCode) :
                new ObjectParameter("countryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOtherResources_Result>("GetOtherResources", countryCodeParameter);
        }
    }
}
